import sqlite3
import logging
import random
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# --- ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ó‡ßÅ‡¶≤‡ßã ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶® ---
# ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡ßü ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ø‡¶§‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶Ü‡¶õ‡ßá, ‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ï‡¶Æ‡¶æ ‡¶¶‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
TASK_LINKS = [
    "https://YOUR_WEBSITE_LINK_1.com/page1.html",
    "https://YOUR_WEBSITE_LINK_2.com/page-a.html",
    "https://YOUR_WEBSITE_LINK_3.com/task-v2.html",
    # ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶∞‡¶ì ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®
]
# -----------------------------------------

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
def setup_database():
    conn = sqlite3.connect("users.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        balance REAL NOT NULL
    )
    """)
    conn.commit()
    return conn

db_connection = setup_database()

# /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    cursor = db_connection.cursor()
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (user_id, balance) VALUES (?, ?)", (user_id, 0.0))
        db_connection.commit()
        await update.message.reply_text("‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶ï‡¶æ‡¶ú ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá /task ‡¶ö‡¶æ‡¶™‡ßÅ‡¶®‡•§")
    else:
        await update.message.reply_text("‡¶Ü‡¶™‡¶®‡¶ø ‡Æè‡Æ±‡Øç‡Æï‡Æ©‡Æµ‡Øá ‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶ø‡¶§‡•§ ‡¶ï‡¶æ‡¶ú ‡¶™‡ßá‡¶§‡ßá /task ‡¶ö‡¶æ‡¶™‡ßÅ‡¶®‡•§")

# /task ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ‡¶≠‡¶æ‡¶¨‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
    random_link = random.choice(TASK_LINKS)
    await update.message.reply_text(f"üëá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï‡ßá ‡¶ó‡¶ø‡ßü‡ßá ‡¶ï‡¶æ‡¶ú ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§ ‡ßß‡ß¶-‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°‡¶ü‡¶ø ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶®:\n\n{random_link}")

# /submit ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def submit_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    try:
        code = context.args[0]
        if len(code) != 10 or not code.isdigit():
            await update.message.reply_text("‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü! ‡¶ï‡ßã‡¶°‡¶ü‡¶ø ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡ßß‡ß¶ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§")
            return

        part1 = int(code[:5])
        part2 = int(code[5:])

        if part1 + part2 == 30000:
            cursor = db_connection.cursor()
            task_reward = 0.25  # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶™‡ßÅ‡¶∞‡¶∏‡ßç‡¶ï‡¶æ‡¶∞‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£
            cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (task_reward, user_id))
            db_connection.commit()
            
            cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
            new_balance = cursor.fetchone()[0]
            await update.message.reply_text(f"üéâ ‡¶ï‡¶æ‡¶ú ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá {task_reward:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ø‡ßã‡¶ó ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§\n‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: {new_balance:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ‡•§")
        else:
            await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶ï‡ßã‡¶°‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡ßü‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶¨‡¶ø‡¶ß‡¶ø: /submit <‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡ßß‡ß¶ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°>")

# /balance ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    cursor = db_connection.cursor()
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result:
        await update.message.reply_text(f"üí∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: {result[0]:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ‡•§")
    else:
        await update.message.reply_text("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá /start ‡¶ö‡¶æ‡¶™‡ßÅ‡¶®‡•§")

def main() -> None:
    # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶∏‡¶≤ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡¶∏‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá
    application = Application.builder().token("YOUR_TELEGRAM_BOT_TOKEN_HERE").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("task", task))
    application.add_handler(CommandHandler("submit", submit_code))
    application.add_handler(CommandHandler("balance", balance))

    application.run_polling()

if __name__ == "__main__":
    main()
