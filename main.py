import sqlite3
import logging
import random
import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

# --- ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржи ржЖржЗржбрж┐ ржПржЦрж╛ржирзЗ ржжрж┐ржи ---
# @userinfobot ржерзЗржХрзЗ ржЖржкржирж╛рж░ ржирж┐ржЬрзЗрж░ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐ ржмрзЗрж░ ржХрж░рзЗ ржПржЦрж╛ржирзЗ ржмрж╕рж╛ржиред
# ржкрзЗржорзЗржирзНржЯрзЗрж░ ржЕржирзБрж░рзЛржзржЧрзБрж▓рзЛ ржПржЗ ржЖржЗржбрж┐рждрзЗржЗ ржкрж╛ржарж╛ржирзЛ рж╣ржмрзЗред
ADMIN_USER_ID = 7347006196 
# ------------------------------------

# --- ржЖржкржирж╛рж░ ржХрж╛ржЬрзЗрж░ рж▓рж┐ржВржХржЧрзБрж▓рзЛ ржПржЦрж╛ржирзЗ ржпрзЛржЧ ржХрж░рзБржи ---
TASK_LINKS = [
    "https://litenewssp.blogspot.com/2025/07/working-online.html",
    "https://YOUR_WEBSITE_LINK_2.com/page-a.html",
    "https://YOUR_WEBSITE_LINK_3.com/task-v2.html",
]
# -----------------------------------------

# рж▓ржЧрж┐ржВ рж╕рзЗржЯржЖржк
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Conversation Handler ржПрж░ ржЬржирзНржп рж╕рзНржЯрзЗржЯ ╪к╪╣╪▒┘К┘Б
GET_NAME, GET_PHONE, GET_METHOD, GET_NUMBER, GET_AMOUNT = range(5)

# ржбрж╛ржЯрж╛ржмрзЗрж╕ рж╕рзЗржЯржЖржк
def setup_database():
    conn = sqlite3.connect("users.db", check_same_thread=False)
    cursor = conn.cursor()
    # users ржЯрзЗржмрж┐рж▓рзЗ ржирждрзБржи ржХрж▓рж╛ржо ржпрзЛржЧ ржХрж░рж╛
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        name TEXT,
        phone_number TEXT,
        balance REAL NOT NULL
    )
    """)
    # withdrawals ржЯрзЗржмрж┐рж▓ рждрзИрж░рж┐ ржХрж░рж╛
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS withdrawals (
        request_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        method TEXT,
        number TEXT,
        amount REAL,
        status TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    """)
    conn.commit()
    return conn

db_connection = setup_database()

# --- рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи Conversation ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    cursor = db_connection.cursor()
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone():
        await update.message.reply_text("ржЖржкржирж┐ роПро▒рпНроХройро╡рпЗ ржирж┐ржмржирзНржзрж┐рждред ржХрж╛ржЬ ржкрзЗрждрзЗ /task ржЪрж╛ржкрзБржиред")
        return ConversationHandler.END
    else:
        await update.message.reply_text("рж╕рзНржмрж╛ржЧрждржо! ржЗржиржХрж╛ржо рж╢рзБрж░рзБ ржХрж░рж╛рж░ ржЬржирзНржп ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржирж┐ржмржирзНржзржи рж╕ржорзНржкржирзНржи ржХрж░рзБржиред\n\nржЖржкржирж╛рж░ рж╕ржорзНржкрзВрж░рзНржг ржирж╛ржо рж▓рж┐ржЦрзБржи:")
        return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    await update.message.reply_text("ржзржирзНржпржмрж╛ржж! ржПржмрж╛рж░ ржЖржкржирж╛рж░ рззрзз рж╕ржВржЦрзНржпрж╛рж░ ржорзЛржмрж╛ржЗрж▓ ржирж╛ржорзНржмрж╛рж░ржЯрж┐ ржжрж┐ржи:")
    return GET_PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    phone_number = update.message.text
    if len(phone_number) != 11 or not phone_number.isdigit():
        await update.message.reply_text("ржнрзБрж▓ ржирж╛ржорзНржмрж╛рж░! ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рззрзз рж╕ржВржЦрзНржпрж╛рж░ рж╕ржарж┐ржХ ржорзЛржмрж╛ржЗрж▓ ржирж╛ржорзНржмрж╛рж░ ржжрж┐ржи:")
        return GET_PHONE

    cursor = db_connection.cursor()
    cursor.execute(
        "INSERT INTO users (user_id, name, phone_number, balance) VALUES (?, ?, ?, ?)",
        (user.id, context.user_data['name'], phone_number, 0.0)
    )
    db_connection.commit()
    await update.message.reply_text("тЬЕ ржЖржкржирж╛рж░ ржирж┐ржмржирзНржзржи рж╕ржлрж▓ рж╣рзЯрзЗржЫрзЗ!\nржПржЦржи /task ржХржорж╛ржирзНржб ржжрж┐рзЯрзЗ ржХрж╛ржЬ рж╢рзБрж░рзБ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред")
    return ConversationHandler.END

# --- ржЙржЗржержбрзНрж░ Conversation ---
async def withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_keyboard = [["ржмрж┐ржХрж╛рж╢", "ржорзЛржмрж╛ржЗрж▓ рж░рж┐ржЪрж╛рж░рзНржЬ"]]
    await update.message.reply_text(
        "ржЖржкржирж┐ ржХрзЛржи ржорж╛ржзрзНржпржорзЗ ржЯрж╛ржХрж╛ рждрзБрж▓рждрзЗ ржЪрж╛ржи? (ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ ржмрж╛рждрж┐рж▓ ржХрж░рждрзЗ /cancel ржЪрж╛ржкрзБржи)",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True),
    )
    return GET_METHOD

async def get_method(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['method'] = update.message.text
    await update.message.reply_text("ржЖржкржирж╛рж░ ржкрзЗржорзЗржирзНржЯ ржирж╛ржорзНржмрж╛рж░ржЯрж┐ ржжрж┐ржи (ржпрзЗ ржирж╛ржорзНржмрж╛рж░рзЗ ржЯрж╛ржХрж╛ ржкрж╛ржарж╛рждрзЗ рж╣ржмрзЗ):")
    return GET_NUMBER

async def get_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['number'] = update.message.text
    await update.message.reply_text("ржЖржкржирж┐ ржХржд ржЯрж╛ржХрж╛ рждрзБрж▓рждрзЗ ржЪрж╛ржи? (ржпрзЗржоржи: 50, 100)")
    return GET_AMOUNT

async def get_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    try:
        amount = float(update.message.text)
        cursor = db_connection.cursor()
        cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        balance = cursor.fetchone()[0]

        if amount > balance:
            await update.message.reply_text(f"тЭМ ржЖржкржирж╛рж░ ржПржХрж╛ржЙржирзНржЯрзЗ ржкрж░рзНржпрж╛ржкрзНржд ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржирзЗржЗред ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {balance:.2f} ржЯрж╛ржХрж╛ред")
            return ConversationHandler.END
        if amount < 10: # рж╕рж░рзНржмржирж┐ржорзНржи ржЙржЗржержбрзНрж░ рж▓рж┐ржорж┐ржЯ
             await update.message.reply_text("тЭМ рж╕рж░рзНржмржирж┐ржорзНржи рззрзж ржЯрж╛ржХрж╛ ржЙржЗржержбрзНрж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред")
             return ConversationHandler.END

        # ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржерзЗржХрзЗ ржЯрж╛ржХрж╛ ржХрзЗржЯрзЗ ржирзЗржУрзЯрж╛
        cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (amount, user_id))
        
        # ржЙржЗржержбрзНрж░ ржЕржирзБрж░рзЛржз ржбрж╛ржЯрж╛ржмрзЗрж╕рзЗ ржпрзЛржЧ ржХрж░рж╛
        method = context.user_data['method']
        number = context.user_data['number']
        cursor.execute(
            "INSERT INTO withdrawals (user_id, method, number, amount, status) VALUES (?, ?, ?, ?, ?)",
            (user_id, method, number, amount, "pending")
        )
        db_connection.commit()

        await update.message.reply_text("тЬЕ ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ ржЕржирзБрж░рзЛржз ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред рзирзк ржШржгрзНржЯрж╛рж░ ржоржзрзНржпрзЗ ржкрзЗржорзЗржирзНржЯ рж╕ржорзНржкржирзНржи ржХрж░рж╛ рж╣ржмрзЗред", reply_markup=ReplyKeyboardRemove())
        
        # ржЕрзНржпрж╛ржбржорж┐ржиржХрзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржарж╛ржирзЛ
        admin_message = (
            f"ЁЯФФ ржирждрзБржи ржкрзЗржорзЗржирзНржЯ ржЕржирзБрж░рзЛржз!\n\n"
            f"ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржЖржЗржбрж┐: {user_id}\n"
            f"ржорж╛ржзрзНржпржо: {method}\n"
            f"ржирж╛ржорзНржмрж╛рж░: {number}\n"
            f"ржкрж░рж┐ржорж╛ржг: {amount:.2f} ржЯрж╛ржХрж╛"
        )
        await context.bot.send_message(chat_id=ADMIN_USER_ID, text=admin_message)

    except (ValueError):
        await update.message.reply_text("тЭМ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╕ржарж┐ржХ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред")
    
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ржЯрж┐ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# --- ржЕржирзНржпрж╛ржирзНржп ржХржорж╛ржирзНржб ---
async def task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    random_link = random.choice(TASK_LINKS)
    await update.message.reply_text(f"ЁЯСЗ ржирж┐ржЪрзЗрж░ рж▓рж┐ржВржХрзЗ ржЧрж┐рзЯрзЗ ржХрж╛ржЬ рж╕ржорзНржкржирзНржи ржХрж░рзБржи ржПржмржВ ржкрзНрж░рж╛ржкрзНржд рззрзж-рж╕ржВржЦрзНржпрж╛рж░ ржХрзЛржбржЯрж┐ ржЬржорж╛ ржжрж┐ржи:\n\n{random_link}")

async def submit_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    # ... (submit_code ржПрж░ ржмрж╛ржХрж┐ ржХрзЛржб ржЖржЧрзЗрж░ ржорждрзЛржЗ ржерж╛ржХржмрзЗ, ржХрзЛржирзЛ ржкрж░рж┐ржмрж░рзНрждржи ржирзЗржЗ) ...
    try:
        code = context.args[0]
        if len(code) != 10 or not code.isdigit():
            await update.message.reply_text("тЭМ ржнрзБрж▓ ржлрж░ржорзНржпрж╛ржЯ! ржХрзЛржбржЯрж┐ ржЕржмрж╢рзНржпржЗ рззрзж рж╕ржВржЦрзНржпрж╛рж░ рж╣рждрзЗ рж╣ржмрзЗред")
            return
        part1 = int(code[:5])
        part2 = int(code[5:])
        if part1 + part2 == 30000:
            cursor = db_connection.cursor()
            task_reward = 0.25
            cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (task_reward, user_id))
            db_connection.commit()
            cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
            new_balance = cursor.fetchone()[0]
            await update.message.reply_text(f"ЁЯОЙ ржХрж╛ржЬ рж╕ржлрж▓ рж╣рзЯрзЗржЫрзЗ! ржЖржкржирж╛рж░ ржПржХрж╛ржЙржирзНржЯрзЗ {task_reward:.2f} ржЯрж╛ржХрж╛ ржпрзЛржЧ рж╣рзЯрзЗржЫрзЗред\nржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {new_balance:.2f} ржЯрж╛ржХрж╛ред")
        else:
            await update.message.reply_text("тЭМ ржЖржкржирж╛рж░ ржЬржорж╛ ржжрзЗржУрзЯрж╛ ржХрзЛржбржЯрж┐ рж╕ржарж┐ржХ ржирзЯред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
    except (IndexError, ValueError):
        await update.message.reply_text("тЪая╕П ржмрзНржпржмрж╣рж╛рж░ржмрж┐ржзрж┐: /submit <ржЖржкржирж╛рж░ рззрзж рж╕ржВржЦрзНржпрж╛рж░ ржХрзЛржб>")


async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    cursor = db_connection.cursor()
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result:
        await update.message.reply_text(f"ЁЯТ░ ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {result[0]:.2f} ржЯрж╛ржХрж╛ред")
    else:
        await update.message.reply_text("ржЖржкржирж╛рж░ ржПржХрж╛ржЙржирзНржЯ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред ржкрзНрж░ржержорзЗ /start ржЪрж╛ржкрзБржиред")

def main() -> None:
    BOT_TOKEN = os.environ.get("BOT_TOKEN")
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐!")
        return
        
    application = Application.builder().token(BOT_TOKEN).build()

    # рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи Conversation Handler ржпрзЛржЧ ржХрж░рж╛
    reg_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # ржЙржЗржержбрзНрж░ Conversation Handler ржпрзЛржЧ ржХрж░рж╛
    withdraw_handler = ConversationHandler(
        entry_points=[CommandHandler("withdraw", withdraw)],
        states={
            GET_METHOD: [MessageHandler(filters.Regex("^(ржмрж┐ржХрж╛рж╢|ржорзЛржмрж╛ржЗрж▓ рж░рж┐ржЪрж╛рж░рзНржЬ)$"), get_method)],
            GET_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_number)],
            GET_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_amount)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    application.add_handler(reg_handler)
    application.add_handler(withdraw_handler)
    application.add_handler(CommandHandler("task", task))
    application.add_handler(CommandHandler("submit", submit_code))
    application.add_handler(CommandHandler("balance", balance))

    application.run_polling()

if __name__ == "__main__":
    main()
